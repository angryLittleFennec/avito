// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package generated

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// GetBannerParams defines parameters for GetBanner.
type GetBannerParams struct {
	FeatureId *int `form:"feature_id,omitempty" json:"feature_id,omitempty"`
	TagId     *int `form:"tag_id,omitempty" json:"tag_id,omitempty"`
	Limit     *int `form:"limit,omitempty" json:"limit,omitempty"`
	Offset    *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Token Токен админа
	Token *string `json:"token,omitempty"`
}

// PostBannerJSONBody defines parameters for PostBanner.
type PostBannerJSONBody struct {
	// Content Содержимое баннера
	Content *map[string]interface{} `json:"content,omitempty"`

	// FeatureId Идентификатор фичи
	FeatureId *int `json:"feature_id,omitempty"`

	// IsActive Флаг активности баннера
	IsActive *bool `json:"is_active,omitempty"`

	// TagIds Идентификаторы тэгов
	TagIds *[]int `json:"tag_ids,omitempty"`
}

// PostBannerParams defines parameters for PostBanner.
type PostBannerParams struct {
	// Token Токен админа
	Token *string `json:"token,omitempty"`
}

// DeleteBannerIdParams defines parameters for DeleteBannerId.
type DeleteBannerIdParams struct {
	// Token Токен админа
	Token *string `json:"token,omitempty"`
}

// PatchBannerIdJSONBody defines parameters for PatchBannerId.
type PatchBannerIdJSONBody struct {
	// Content Содержимое баннера
	Content *map[string]interface{} `json:"content"`

	// FeatureId Идентификатор фичи
	FeatureId *int `json:"feature_id"`

	// IsActive Флаг активности баннера
	IsActive *bool `json:"is_active"`

	// TagIds Идентификаторы тэгов
	TagIds *[]int `json:"tag_ids"`
}

// PatchBannerIdParams defines parameters for PatchBannerId.
type PatchBannerIdParams struct {
	// Token Токен админа
	Token *string `json:"token,omitempty"`
}

// GetUserBannerParams defines parameters for GetUserBanner.
type GetUserBannerParams struct {
	TagId           int   `form:"tag_id" json:"tag_id"`
	FeatureId       int   `form:"feature_id" json:"feature_id"`
	UseLastRevision *bool `form:"use_last_revision,omitempty" json:"use_last_revision,omitempty"`

	// Token Токен пользователя
	Token *string `json:"token,omitempty"`
}

// PostBannerJSONRequestBody defines body for PostBanner for application/json ContentType.
type PostBannerJSONRequestBody PostBannerJSONBody

// PatchBannerIdJSONRequestBody defines body for PatchBannerId for application/json ContentType.
type PatchBannerIdJSONRequestBody PatchBannerIdJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBanner request
	GetBanner(ctx context.Context, params *GetBannerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBannerWithBody request with any body
	PostBannerWithBody(ctx context.Context, params *PostBannerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBanner(ctx context.Context, params *PostBannerParams, body PostBannerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteBannerId request
	DeleteBannerId(ctx context.Context, id int, params *DeleteBannerIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchBannerIdWithBody request with any body
	PatchBannerIdWithBody(ctx context.Context, id int, params *PatchBannerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchBannerId(ctx context.Context, id int, params *PatchBannerIdParams, body PatchBannerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserBanner request
	GetUserBanner(ctx context.Context, params *GetUserBannerParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBanner(ctx context.Context, params *GetBannerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBannerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBannerWithBody(ctx context.Context, params *PostBannerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBannerRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBanner(ctx context.Context, params *PostBannerParams, body PostBannerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBannerRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteBannerId(ctx context.Context, id int, params *DeleteBannerIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBannerIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchBannerIdWithBody(ctx context.Context, id int, params *PatchBannerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchBannerIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchBannerId(ctx context.Context, id int, params *PatchBannerIdParams, body PatchBannerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchBannerIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserBanner(ctx context.Context, params *GetUserBannerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserBannerRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBannerRequest generates requests for GetBanner
func NewGetBannerRequest(server string, params *GetBannerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/banner")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.FeatureId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "feature_id", runtime.ParamLocationQuery, *params.FeatureId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag_id", runtime.ParamLocationQuery, *params.TagId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Token != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
			if err != nil {
				return nil, err
			}

			req.Header.Set("token", headerParam0)
		}

	}

	return req, nil
}

// NewPostBannerRequest calls the generic PostBanner builder with application/json body
func NewPostBannerRequest(server string, params *PostBannerParams, body PostBannerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBannerRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostBannerRequestWithBody generates requests for PostBanner with any type of body
func NewPostBannerRequestWithBody(server string, params *PostBannerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/banner")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Token != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
			if err != nil {
				return nil, err
			}

			req.Header.Set("token", headerParam0)
		}

	}

	return req, nil
}

// NewDeleteBannerIdRequest generates requests for DeleteBannerId
func NewDeleteBannerIdRequest(server string, id int, params *DeleteBannerIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/banner/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Token != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
			if err != nil {
				return nil, err
			}

			req.Header.Set("token", headerParam0)
		}

	}

	return req, nil
}

// NewPatchBannerIdRequest calls the generic PatchBannerId builder with application/json body
func NewPatchBannerIdRequest(server string, id int, params *PatchBannerIdParams, body PatchBannerIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchBannerIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPatchBannerIdRequestWithBody generates requests for PatchBannerId with any type of body
func NewPatchBannerIdRequestWithBody(server string, id int, params *PatchBannerIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/banner/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Token != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
			if err != nil {
				return nil, err
			}

			req.Header.Set("token", headerParam0)
		}

	}

	return req, nil
}

// NewGetUserBannerRequest generates requests for GetUserBanner
func NewGetUserBannerRequest(server string, params *GetUserBannerParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user_banner")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag_id", runtime.ParamLocationQuery, params.TagId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "feature_id", runtime.ParamLocationQuery, params.FeatureId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.UseLastRevision != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "use_last_revision", runtime.ParamLocationQuery, *params.UseLastRevision); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Token != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
			if err != nil {
				return nil, err
			}

			req.Header.Set("token", headerParam0)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBannerWithResponse request
	GetBannerWithResponse(ctx context.Context, params *GetBannerParams, reqEditors ...RequestEditorFn) (*GetBannerResponse, error)

	// PostBannerWithBodyWithResponse request with any body
	PostBannerWithBodyWithResponse(ctx context.Context, params *PostBannerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBannerResponse, error)

	PostBannerWithResponse(ctx context.Context, params *PostBannerParams, body PostBannerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBannerResponse, error)

	// DeleteBannerIdWithResponse request
	DeleteBannerIdWithResponse(ctx context.Context, id int, params *DeleteBannerIdParams, reqEditors ...RequestEditorFn) (*DeleteBannerIdResponse, error)

	// PatchBannerIdWithBodyWithResponse request with any body
	PatchBannerIdWithBodyWithResponse(ctx context.Context, id int, params *PatchBannerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchBannerIdResponse, error)

	PatchBannerIdWithResponse(ctx context.Context, id int, params *PatchBannerIdParams, body PatchBannerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchBannerIdResponse, error)

	// GetUserBannerWithResponse request
	GetUserBannerWithResponse(ctx context.Context, params *GetUserBannerParams, reqEditors ...RequestEditorFn) (*GetUserBannerResponse, error)
}

type GetBannerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		// BannerId Идентификатор баннера
		BannerId *int `json:"banner_id,omitempty"`

		// Content Содержимое баннера
		Content *map[string]interface{} `json:"content,omitempty"`

		// CreatedAt Дата создания баннера
		CreatedAt *time.Time `json:"created_at,omitempty"`

		// FeatureId Идентификатор фичи
		FeatureId *int `json:"feature_id,omitempty"`

		// IsActive Флаг активности баннера
		IsActive *bool `json:"is_active,omitempty"`

		// TagIds Идентификаторы тэгов
		TagIds *[]int `json:"tag_ids,omitempty"`

		// UpdatedAt Дата обновления баннера
		UpdatedAt *time.Time `json:"updated_at,omitempty"`
	}
	JSON500 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetBannerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBannerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBannerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// BannerId Идентификатор созданного баннера
		BannerId *int `json:"banner_id,omitempty"`
	}
	JSON400 *struct {
		Error *string `json:"error,omitempty"`
	}
	JSON500 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostBannerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBannerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteBannerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Error *string `json:"error,omitempty"`
	}
	JSON500 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r DeleteBannerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBannerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchBannerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Error *string `json:"error,omitempty"`
	}
	JSON500 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PatchBannerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchBannerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserBannerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *struct {
		Error *string `json:"error,omitempty"`
	}
	JSON500 *struct {
		Error *string `json:"error,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUserBannerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserBannerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBannerWithResponse request returning *GetBannerResponse
func (c *ClientWithResponses) GetBannerWithResponse(ctx context.Context, params *GetBannerParams, reqEditors ...RequestEditorFn) (*GetBannerResponse, error) {
	rsp, err := c.GetBanner(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBannerResponse(rsp)
}

// PostBannerWithBodyWithResponse request with arbitrary body returning *PostBannerResponse
func (c *ClientWithResponses) PostBannerWithBodyWithResponse(ctx context.Context, params *PostBannerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBannerResponse, error) {
	rsp, err := c.PostBannerWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBannerResponse(rsp)
}

func (c *ClientWithResponses) PostBannerWithResponse(ctx context.Context, params *PostBannerParams, body PostBannerJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBannerResponse, error) {
	rsp, err := c.PostBanner(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBannerResponse(rsp)
}

// DeleteBannerIdWithResponse request returning *DeleteBannerIdResponse
func (c *ClientWithResponses) DeleteBannerIdWithResponse(ctx context.Context, id int, params *DeleteBannerIdParams, reqEditors ...RequestEditorFn) (*DeleteBannerIdResponse, error) {
	rsp, err := c.DeleteBannerId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBannerIdResponse(rsp)
}

// PatchBannerIdWithBodyWithResponse request with arbitrary body returning *PatchBannerIdResponse
func (c *ClientWithResponses) PatchBannerIdWithBodyWithResponse(ctx context.Context, id int, params *PatchBannerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchBannerIdResponse, error) {
	rsp, err := c.PatchBannerIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchBannerIdResponse(rsp)
}

func (c *ClientWithResponses) PatchBannerIdWithResponse(ctx context.Context, id int, params *PatchBannerIdParams, body PatchBannerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchBannerIdResponse, error) {
	rsp, err := c.PatchBannerId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchBannerIdResponse(rsp)
}

// GetUserBannerWithResponse request returning *GetUserBannerResponse
func (c *ClientWithResponses) GetUserBannerWithResponse(ctx context.Context, params *GetUserBannerParams, reqEditors ...RequestEditorFn) (*GetUserBannerResponse, error) {
	rsp, err := c.GetUserBanner(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserBannerResponse(rsp)
}

// ParseGetBannerResponse parses an HTTP response from a GetBannerWithResponse call
func ParseGetBannerResponse(rsp *http.Response) (*GetBannerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBannerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			// BannerId Идентификатор баннера
			BannerId *int `json:"banner_id,omitempty"`

			// Content Содержимое баннера
			Content *map[string]interface{} `json:"content,omitempty"`

			// CreatedAt Дата создания баннера
			CreatedAt *time.Time `json:"created_at,omitempty"`

			// FeatureId Идентификатор фичи
			FeatureId *int `json:"feature_id,omitempty"`

			// IsActive Флаг активности баннера
			IsActive *bool `json:"is_active,omitempty"`

			// TagIds Идентификаторы тэгов
			TagIds *[]int `json:"tag_ids,omitempty"`

			// UpdatedAt Дата обновления баннера
			UpdatedAt *time.Time `json:"updated_at,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostBannerResponse parses an HTTP response from a PostBannerWithResponse call
func ParsePostBannerResponse(rsp *http.Response) (*PostBannerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBannerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// BannerId Идентификатор созданного баннера
			BannerId *int `json:"banner_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteBannerIdResponse parses an HTTP response from a DeleteBannerIdWithResponse call
func ParseDeleteBannerIdResponse(rsp *http.Response) (*DeleteBannerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBannerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePatchBannerIdResponse parses an HTTP response from a PatchBannerIdWithResponse call
func ParsePatchBannerIdResponse(rsp *http.Response) (*PatchBannerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchBannerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUserBannerResponse parses an HTTP response from a GetUserBannerWithResponse call
func ParseGetUserBannerResponse(rsp *http.Response) (*GetUserBannerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserBannerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error *string `json:"error,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получение всех баннеров c фильтрацией по фиче и/или тегу
	// (GET /banner)
	GetBanner(ctx echo.Context, params GetBannerParams) error
	// Создание нового баннера
	// (POST /banner)
	PostBanner(ctx echo.Context, params PostBannerParams) error
	// Удаление баннера по идентификатору
	// (DELETE /banner/{id})
	DeleteBannerId(ctx echo.Context, id int, params DeleteBannerIdParams) error
	// Обновление содержимого баннера
	// (PATCH /banner/{id})
	PatchBannerId(ctx echo.Context, id int, params PatchBannerIdParams) error
	// Получение баннера для пользователя
	// (GET /user_banner)
	GetUserBanner(ctx echo.Context, params GetUserBannerParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetBanner converts echo context to params.
func (w *ServerInterfaceWrapper) GetBanner(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBannerParams
	// ------------- Optional query parameter "feature_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "feature_id", ctx.QueryParams(), &params.FeatureId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter feature_id: %s", err))
	}

	// ------------- Optional query parameter "tag_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "tag_id", ctx.QueryParams(), &params.TagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag_id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token")]; found {
		var Token string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "token", valueList[0], &Token, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
		}

		params.Token = &Token
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBanner(ctx, params)
	return err
}

// PostBanner converts echo context to params.
func (w *ServerInterfaceWrapper) PostBanner(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params PostBannerParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token")]; found {
		var Token string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "token", valueList[0], &Token, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
		}

		params.Token = &Token
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostBanner(ctx, params)
	return err
}

// DeleteBannerId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBannerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteBannerIdParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token")]; found {
		var Token string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "token", valueList[0], &Token, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
		}

		params.Token = &Token
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteBannerId(ctx, id, params)
	return err
}

// PatchBannerId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchBannerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchBannerIdParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token")]; found {
		var Token string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "token", valueList[0], &Token, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
		}

		params.Token = &Token
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchBannerId(ctx, id, params)
	return err
}

// GetUserBanner converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserBanner(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserBannerParams
	// ------------- Required query parameter "tag_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "tag_id", ctx.QueryParams(), &params.TagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tag_id: %s", err))
	}

	// ------------- Required query parameter "feature_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "feature_id", ctx.QueryParams(), &params.FeatureId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter feature_id: %s", err))
	}

	// ------------- Optional query parameter "use_last_revision" -------------

	err = runtime.BindQueryParameter("form", true, false, "use_last_revision", ctx.QueryParams(), &params.UseLastRevision)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter use_last_revision: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Optional header parameter "token" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("token")]; found {
		var Token string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for token, got %d", n))
		}

		err = runtime.BindStyledParameterWithOptions("simple", "token", valueList[0], &Token, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: false, Required: false})
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter token: %s", err))
		}

		params.Token = &Token
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUserBanner(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/banner", wrapper.GetBanner)
	router.POST(baseURL+"/banner", wrapper.PostBanner)
	router.DELETE(baseURL+"/banner/:id", wrapper.DeleteBannerId)
	router.PATCH(baseURL+"/banner/:id", wrapper.PatchBannerId)
	router.GET(baseURL+"/user_banner", wrapper.GetUserBanner)

}
